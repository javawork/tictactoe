// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tictactoe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tictactoe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tictactoe {

namespace {

const ::google::protobuf::Descriptor* CLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* SStart_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SStart_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSetPiece_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSetPiece_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSetPiece_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSetPiece_reflection_ = NULL;
const ::google::protobuf::Descriptor* SEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tictactoe_2eproto() {
  protobuf_AddDesc_tictactoe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tictactoe.proto");
  GOOGLE_CHECK(file != NULL);
  CLogin_descriptor_ = file->message_type(0);
  static const int CLogin_offsets_[1] = {
  };
  CLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLogin_descriptor_,
      CLogin::default_instance_,
      CLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLogin));
  SLogin_descriptor_ = file->message_type(1);
  static const int SLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin, id_),
  };
  SLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLogin_descriptor_,
      SLogin::default_instance_,
      SLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLogin));
  SStart_descriptor_ = file->message_type(2);
  static const int SStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStart, list_),
  };
  SStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SStart_descriptor_,
      SStart::default_instance_,
      SStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SStart));
  SStart_User_descriptor_ = SStart_descriptor_->nested_type(0);
  static const int SStart_User_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStart_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStart_User, piece_type_),
  };
  SStart_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SStart_User_descriptor_,
      SStart_User::default_instance_,
      SStart_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStart_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStart_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SStart_User));
  CSetPiece_descriptor_ = file->message_type(3);
  static const int CSetPiece_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSetPiece, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSetPiece, piecetype_),
  };
  CSetPiece_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSetPiece_descriptor_,
      CSetPiece::default_instance_,
      CSetPiece_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSetPiece, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSetPiece, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSetPiece));
  SSetPiece_descriptor_ = file->message_type(4);
  static const int SSetPiece_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSetPiece, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSetPiece, piecetype_),
  };
  SSetPiece_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSetPiece_descriptor_,
      SSetPiece::default_instance_,
      SSetPiece_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSetPiece, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSetPiece, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSetPiece));
  SEnd_descriptor_ = file->message_type(5);
  static const int SEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEnd, winner_piece_),
  };
  SEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SEnd_descriptor_,
      SEnd::default_instance_,
      SEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SEnd));
  MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tictactoe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLogin_descriptor_, &CLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLogin_descriptor_, &SLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SStart_descriptor_, &SStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SStart_User_descriptor_, &SStart_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSetPiece_descriptor_, &CSetPiece::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSetPiece_descriptor_, &SSetPiece::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SEnd_descriptor_, &SEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tictactoe_2eproto() {
  delete CLogin::default_instance_;
  delete CLogin_reflection_;
  delete SLogin::default_instance_;
  delete SLogin_reflection_;
  delete SStart::default_instance_;
  delete SStart_reflection_;
  delete SStart_User::default_instance_;
  delete SStart_User_reflection_;
  delete CSetPiece::default_instance_;
  delete CSetPiece_reflection_;
  delete SSetPiece::default_instance_;
  delete SSetPiece_reflection_;
  delete SEnd::default_instance_;
  delete SEnd_reflection_;
}

void protobuf_AddDesc_tictactoe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017tictactoe.proto\022\ttictactoe\"\010\n\006CLogin\"\024"
    "\n\006SLogin\022\n\n\002id\030\001 \002(\005\"V\n\006SStart\022$\n\004list\030\001"
    " \003(\0132\026.tictactoe.SStart.User\032&\n\004User\022\n\n\002"
    "id\030\001 \002(\005\022\022\n\npiece_type\030\002 \002(\005\"+\n\tCSetPiec"
    "e\022\013\n\003pos\030\001 \002(\005\022\021\n\tpiecetype\030\002 \002(\005\"+\n\tSSe"
    "tPiece\022\013\n\003pos\030\001 \002(\005\022\021\n\tpiecetype\030\002 \002(\005\"\034"
    "\n\004SEnd\022\024\n\014winner_piece\030\001 \002(\005*_\n\013MessageT"
    "ype\022\013\n\007C_LOGIN\020\000\022\013\n\007S_LOGIN\020\001\022\013\n\007S_START"
    "\020\002\022\016\n\nC_SETPIECE\020\003\022\016\n\nS_SETPIECE\020\004\022\t\n\005S_"
    "END\020\005", 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tictactoe.proto", &protobuf_RegisterTypes);
  CLogin::default_instance_ = new CLogin();
  SLogin::default_instance_ = new SLogin();
  SStart::default_instance_ = new SStart();
  SStart_User::default_instance_ = new SStart_User();
  CSetPiece::default_instance_ = new CSetPiece();
  SSetPiece::default_instance_ = new SSetPiece();
  SEnd::default_instance_ = new SEnd();
  CLogin::default_instance_->InitAsDefaultInstance();
  SLogin::default_instance_->InitAsDefaultInstance();
  SStart::default_instance_->InitAsDefaultInstance();
  SStart_User::default_instance_->InitAsDefaultInstance();
  CSetPiece::default_instance_->InitAsDefaultInstance();
  SSetPiece::default_instance_->InitAsDefaultInstance();
  SEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tictactoe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tictactoe_2eproto {
  StaticDescriptorInitializer_tictactoe_2eproto() {
    protobuf_AddDesc_tictactoe_2eproto();
  }
} static_descriptor_initializer_tictactoe_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLogin::CLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLogin::InitAsDefaultInstance() {
}

CLogin::CLogin(const CLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLogin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLogin::~CLogin() {
  SharedDtor();
}

void CLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLogin_descriptor_;
}

const CLogin& CLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tictactoe_2eproto();
  return *default_instance_;
}

CLogin* CLogin::default_instance_ = NULL;

CLogin* CLogin::New() const {
  return new CLogin;
}

void CLogin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLogin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLogin::MergeFrom(const CLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLogin::CopyFrom(const CLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLogin::IsInitialized() const {

  return true;
}

void CLogin::Swap(CLogin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLogin_descriptor_;
  metadata.reflection = CLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLogin::kIdFieldNumber;
#endif  // !_MSC_VER

SLogin::SLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLogin::InitAsDefaultInstance() {
}

SLogin::SLogin(const SLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLogin::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLogin::~SLogin() {
  SharedDtor();
}

void SLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLogin_descriptor_;
}

const SLogin& SLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tictactoe_2eproto();
  return *default_instance_;
}

SLogin* SLogin::default_instance_ = NULL;

SLogin* SLogin::New() const {
  return new SLogin;
}

void SLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLogin::MergeFrom(const SLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLogin::CopyFrom(const SLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SLogin::Swap(SLogin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLogin_descriptor_;
  metadata.reflection = SLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SStart_User::kIdFieldNumber;
const int SStart_User::kPieceTypeFieldNumber;
#endif  // !_MSC_VER

SStart_User::SStart_User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SStart_User::InitAsDefaultInstance() {
}

SStart_User::SStart_User(const SStart_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SStart_User::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  piece_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SStart_User::~SStart_User() {
  SharedDtor();
}

void SStart_User::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SStart_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SStart_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SStart_User_descriptor_;
}

const SStart_User& SStart_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tictactoe_2eproto();
  return *default_instance_;
}

SStart_User* SStart_User::default_instance_ = NULL;

SStart_User* SStart_User::New() const {
  return new SStart_User;
}

void SStart_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    piece_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SStart_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piece_type;
        break;
      }

      // required int32 piece_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piece_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piece_type_)));
          set_has_piece_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SStart_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 piece_type = 2;
  if (has_piece_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piece_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SStart_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 piece_type = 2;
  if (has_piece_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->piece_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SStart_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 piece_type = 2;
    if (has_piece_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piece_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SStart_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SStart_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SStart_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SStart_User::MergeFrom(const SStart_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_piece_type()) {
      set_piece_type(from.piece_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SStart_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SStart_User::CopyFrom(const SStart_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStart_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SStart_User::Swap(SStart_User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(piece_type_, other->piece_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SStart_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SStart_User_descriptor_;
  metadata.reflection = SStart_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SStart::kListFieldNumber;
#endif  // !_MSC_VER

SStart::SStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SStart::InitAsDefaultInstance() {
}

SStart::SStart(const SStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SStart::~SStart() {
  SharedDtor();
}

void SStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SStart_descriptor_;
}

const SStart& SStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tictactoe_2eproto();
  return *default_instance_;
}

SStart* SStart::default_instance_ = NULL;

SStart* SStart::New() const {
  return new SStart;
}

void SStart::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tictactoe.SStart.User list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tictactoe.SStart.User list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tictactoe.SStart.User list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SStart::ByteSize() const {
  int total_size = 0;

  // repeated .tictactoe.SStart.User list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SStart::MergeFrom(const SStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SStart::CopyFrom(const SStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStart::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void SStart::Swap(SStart* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SStart_descriptor_;
  metadata.reflection = SStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSetPiece::kPosFieldNumber;
const int CSetPiece::kPiecetypeFieldNumber;
#endif  // !_MSC_VER

CSetPiece::CSetPiece()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSetPiece::InitAsDefaultInstance() {
}

CSetPiece::CSetPiece(const CSetPiece& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSetPiece::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  piecetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSetPiece::~CSetPiece() {
  SharedDtor();
}

void CSetPiece::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSetPiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSetPiece::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSetPiece_descriptor_;
}

const CSetPiece& CSetPiece::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tictactoe_2eproto();
  return *default_instance_;
}

CSetPiece* CSetPiece::default_instance_ = NULL;

CSetPiece* CSetPiece::New() const {
  return new CSetPiece;
}

void CSetPiece::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    piecetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSetPiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piecetype;
        break;
      }

      // required int32 piecetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piecetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piecetype_)));
          set_has_piecetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSetPiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required int32 piecetype = 2;
  if (has_piecetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piecetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSetPiece::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required int32 piecetype = 2;
  if (has_piecetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->piecetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSetPiece::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 piecetype = 2;
    if (has_piecetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piecetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSetPiece::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSetPiece* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSetPiece*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSetPiece::MergeFrom(const CSetPiece& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_piecetype()) {
      set_piecetype(from.piecetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSetPiece::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetPiece::CopyFrom(const CSetPiece& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetPiece::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSetPiece::Swap(CSetPiece* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(piecetype_, other->piecetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSetPiece::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSetPiece_descriptor_;
  metadata.reflection = CSetPiece_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSetPiece::kPosFieldNumber;
const int SSetPiece::kPiecetypeFieldNumber;
#endif  // !_MSC_VER

SSetPiece::SSetPiece()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSetPiece::InitAsDefaultInstance() {
}

SSetPiece::SSetPiece(const SSetPiece& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSetPiece::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  piecetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSetPiece::~SSetPiece() {
  SharedDtor();
}

void SSetPiece::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSetPiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSetPiece::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSetPiece_descriptor_;
}

const SSetPiece& SSetPiece::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tictactoe_2eproto();
  return *default_instance_;
}

SSetPiece* SSetPiece::default_instance_ = NULL;

SSetPiece* SSetPiece::New() const {
  return new SSetPiece;
}

void SSetPiece::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    piecetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSetPiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piecetype;
        break;
      }

      // required int32 piecetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piecetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piecetype_)));
          set_has_piecetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSetPiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required int32 piecetype = 2;
  if (has_piecetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piecetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSetPiece::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required int32 piecetype = 2;
  if (has_piecetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->piecetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSetPiece::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 piecetype = 2;
    if (has_piecetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piecetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSetPiece::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSetPiece* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSetPiece*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSetPiece::MergeFrom(const SSetPiece& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_piecetype()) {
      set_piecetype(from.piecetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSetPiece::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSetPiece::CopyFrom(const SSetPiece& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSetPiece::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SSetPiece::Swap(SSetPiece* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(piecetype_, other->piecetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSetPiece::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSetPiece_descriptor_;
  metadata.reflection = SSetPiece_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SEnd::kWinnerPieceFieldNumber;
#endif  // !_MSC_VER

SEnd::SEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SEnd::InitAsDefaultInstance() {
}

SEnd::SEnd(const SEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SEnd::SharedCtor() {
  _cached_size_ = 0;
  winner_piece_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SEnd::~SEnd() {
  SharedDtor();
}

void SEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SEnd_descriptor_;
}

const SEnd& SEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tictactoe_2eproto();
  return *default_instance_;
}

SEnd* SEnd::default_instance_ = NULL;

SEnd* SEnd::New() const {
  return new SEnd;
}

void SEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winner_piece_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winner_piece = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_piece_)));
          set_has_winner_piece();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winner_piece = 1;
  if (has_winner_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner_piece(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winner_piece = 1;
  if (has_winner_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner_piece(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winner_piece = 1;
    if (has_winner_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_piece());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SEnd::MergeFrom(const SEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner_piece()) {
      set_winner_piece(from.winner_piece());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SEnd::CopyFrom(const SEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SEnd::Swap(SEnd* other) {
  if (other != this) {
    std::swap(winner_piece_, other->winner_piece_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SEnd_descriptor_;
  metadata.reflection = SEnd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tictactoe

// @@protoc_insertion_point(global_scope)
